volumes:
  n8n_storage:
  postgres_storage:
  qdrant_storage:
  pgadmin_storage:

networks:
  demo:

services:
  # ---------- DATABASE ---------- #
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    container_name: postgres
    env_file: .env
    networks: ['demo']
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./db/init_documents.sql:/docker-entrypoint-initdb.d/init_documents.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # ---------- PGADMIN ---------- #
  pgadmin:
    image: dpage/pgadmin4:6.21
    hostname: pgadmin
    container_name: pgadmin
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED=False
      - PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=20
    volumes:
      - pgadmin_storage:/var/lib/pgadmin
    depends_on:
      - postgres

  # ---------- N8N IMPORT (One-time setup) ---------- #
  n8n-import:
    image: n8nio/n8n:latest
    hostname: n8n-import
    container_name: n8n-import
    env_file: .env
    networks: ['demo']
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-pdfai}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-pdfai}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-o0k8GTCG3ojM8w/Gb10vQ1wsM1Nb9YM1}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET:-23487thv82h2h4vh23985hdg}
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --input=/demo-data/credentials/current_credentials.json && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy

  # ---------- MAIN N8N UI/API ---------- #
  n8n:
    image: n8nio/n8n:latest
    hostname: n8n
    container_name: n8n
    env_file: .env
    networks: ['demo']
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-pdfai}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-pdfai}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-o0k8GTCG3ojM8w/Gb10vQ1wsM1Nb9YM1}
      
      # URL configuration using environment variables
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL:-http://localhost/n8n/}
      - N8N_PUBLIC_URL=${N8N_PUBLIC_URL:-http://localhost/n8n/}
      - N8N_PATH=/n8n/
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost/n8n/webhook/}
      
      # Authentication
      - N8N_USER=${N8N_USER:-admin}
      - N8N_PASS=${N8N_PASS:-Password1}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET:-23487thv82h2h4vh23985hdg}
      - N8N_USER_MANAGEMENT_DISABLED=false
      
      # API and CORS
      - N8N_PUBLIC_API_DISABLED=false
      - N8N_API_SECURITY_AUDIT_LOGS_DISABLED=false
      - N8N_CORS_ALLOWED_ORIGINS=${N8N_CORS_ALLOWED_ORIGINS:-http://localhost}
      - N8N_CORS_ALLOW_CREDENTIALS=true
      
      # File handling
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_IMPORT_EXPORT_FOLDER=/home/node/.n8n/import
      - N8N_IMPORT_EXPORT_SKIP_PROMPT=1
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  # ---------- QDRANT VECTOR DB ---------- #
  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  # ---------- FRONTEND ---------- #
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    hostname: frontend
    container_name: rag-frontend
    networks: ['demo']
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://localhost/n8n/webhook
      - NEXT_PUBLIC_N8N_URL=${NEXT_PUBLIC_N8N_URL:-http://localhost/n8n/}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - n8n
      - qdrant

  # ---------- NGINX REVERSE-PROXY ---------- #
  nginx:
    image: nginx:alpine
    hostname: nginx
    container_name: nginx
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - n8n
      - pgadmin
      - qdrant
