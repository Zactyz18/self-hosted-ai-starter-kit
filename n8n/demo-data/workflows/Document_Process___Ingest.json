{
  "name": "Document Process & Ingest",
  "nodes": [
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "=documentsnew",
          "mode": "id"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.1,
      "position": [
        1460,
        -440
      ],
      "id": "8037ea8f-9329-4252-9f02-9ba037496d2d",
      "name": "Qdrant Vector Store2",
      "credentials": {
        "qdrantApi": {
          "id": "sFfERYppMeBnFNeA",
          "name": "Local QdrantApi database"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-ada-002",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1400,
        -120
      ],
      "id": "1ce25622-5a62-4e38-8d4e-f899079f3fa2",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "OB9xCrm90whUNBDQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1520,
        -240
      ],
      "id": "7957eb04-4afa-49d5-ac53-ce747404ff98",
      "name": "Default Data Loader1"
    },
    {
      "parameters": {
        "content": "## Ingestion WITH Context\n\n",
        "height": 780,
        "width": 2220,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -880,
        -500
      ],
      "typeVersion": 1,
      "id": "cb5d0ddd-ee23-4842-aa97-065c021d679f",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\": {{ JSON.stringify($json.data) }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        280,
        -420
      ],
      "id": "d1ad0e57-1170-4a3a-aa0e-6a291eb374a3",
      "name": "Document Data"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        60,
        -440
      ],
      "id": "4c584b5e-2a19-42e7-90ca-193a9747cb8d",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $binary.data.fileType }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ac93d75e-0b80-49fc-9f1c-488d9b4be4ce"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TXT"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fd4f2f67-aa57-4467-b34a-9f2f9e496423",
                    "leftValue": "={{ $binary.data.fileType }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a8d72e67-9485-4aba-ba52-ec5895354221",
                    "leftValue": "={{ $binary.data.fileType }}",
                    "rightValue": "docx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DOCX"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -240,
        -200
      ],
      "id": "5c349152-7bf6-47e3-a5a9-00c53bc04e9e",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        60,
        -280
      ],
      "id": "1ac0dde0-165a-4f66-9681-ba5507df393b",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "jsCode": "const chunkSize = 250;\nconst chunkOverlap = 50;\nconst text = $input.item.json.data.replace(/\\n/, '');\n\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let splitPoint;\n\n  // Try splitting at paragraph level first\n  splitPoint = remainingText.lastIndexOf(\"\\n\\n\", chunkSize);\n\n  // If no paragraph split, try splitting at sentence level\n  if (splitPoint === -1) {\n    splitPoint = remainingText.lastIndexOf(\". \", chunkSize);\n  }\n\n  // If no sentence split, try splitting at word level\n  if (splitPoint === -1) {\n    splitPoint = remainingText.lastIndexOf(\" \", chunkSize);\n  }\n\n  // If still no split point, force cut at chunkSize\n  if (splitPoint === -1 || splitPoint < chunkSize * 0.5) {\n    splitPoint = chunkSize; // Hard split if no good split point\n  }\n\n  // Extract chunk and adjust remaining text with overlap\n  let chunk = remainingText.substring(0, splitPoint).trim();\n  chunks.push(chunk);\n\n  // Move the pointer forward while keeping the overlap\n  remainingText = remainingText.substring(Math.max(0, splitPoint - chunkOverlap)).trim();\n\n  // Break if remaining text is too small to form another chunk\n  if (remainingText.length < chunkSize * 0.2) {\n    chunks.push(remainingText);\n    break;\n  }\n}\n\nreturn { chunks };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        -420
      ],
      "id": "67cfdd7b-2bd8-47f9-ab68-8c14686fa4d8",
      "name": "Recursive  Splitter"
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        600,
        -420
      ],
      "id": "38319baa-87ae-4d7f-9345-d95abfb02422",
      "name": "Split Out"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        860,
        -140
      ],
      "id": "614a09d6-3c02-4ae0-9668-19367445dc0f",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "OB9xCrm90whUNBDQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "text",
              "separateBy": "other",
              "customSeparator": "###SPLIT###"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        1180,
        -420
      ],
      "id": "ea3a7908-623c-4e9c-81a6-2d378ce005c9",
      "name": "Summarize"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<document>\n{{ $('Document Data').item.json.data }}\n</document>\n\nHere is the chunk we want to situate within the overall document:\n\n<chunk>\n{{$json.chunks}}\n</chunk>\n\nPlease:  \n- Provide a short and succinct **context** to situate this chunk within the document for improved search retrieval.  \n- Return the **original chunk** exactly as provided unless a correction is necessary.  \n- If the chunk contains an **incomplete number, percentage, or entity**, correct it using the full document.  \n- If part of a **sentence is cut off**, reconstruct the missing words only if necessary for clarity.  \n- If the chunk is part of a table, include the complete table entry to maintain data integrity.  \n- Do not add any additional explanations or formatting beyond the required output.  \n\nFill in the following format:  \n[succinct context] : [original chunk or corrected version if necessary]  \n\nYour response should contain only the text that replaces these placeholders, without including the placeholder labels themselves.\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        820,
        -420
      ],
      "id": "4885db35-ec3d-4331-a636-47e438952e89",
      "name": "Add Context"
    },
    {
      "parameters": {
        "separator": "###SPLIT###",
        "chunkSize": 250,
        "chunkOverlap": 50
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1600,
        -20
      ],
      "id": "dac7c549-9a0e-4a5b-8129-3406cc9a3471",
      "name": "Character Text Splitter"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -1500,
        -680
      ],
      "id": "5c2b127c-6bcb-4657-bdff-17531733b746",
      "name": "Every 30 Seconds"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-documents",
              "leftValue": "={{ $json.file_path }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -800,
        -700
      ],
      "id": "01930c38-e5b3-4255-9c5f-adf560fe686b",
      "name": "Has Documents?"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "processing_status",
              "value": "uploaded"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -960,
        -700
      ],
      "id": "37a8f448-68c5-4f6d-8ee7-fc786b9fae1f",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "z49ainMq5BXxCiVz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fileSelector": "={{ $('Postgres').item.json.file_path }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -280,
        -800
      ],
      "id": "a35a4190-fb9d-4b78-97d2-8db1d323b9b3",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "processing_status": "processing",
            "file_id": "={{ $json.file_id }}"
          },
          "matchingColumns": [
            "file_id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_id",
              "displayName": "file_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "file_name",
              "displayName": "file_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_type",
              "displayName": "file_type",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_size",
              "displayName": "file_size",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_path",
              "displayName": "file_path",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "upload_time",
              "displayName": "upload_time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "processing_status",
              "displayName": "processing_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chunks_created",
              "displayName": "chunks_created",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "vector_count",
              "displayName": "vector_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_message",
              "displayName": "error_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "metadata",
              "displayName": "metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -580,
        -800
      ],
      "id": "c1fb5290-46f0-4f09-b336-27620db318ca",
      "name": "Update Status",
      "credentials": {
        "postgres": {
          "id": "z49ainMq5BXxCiVz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "processing_status",
              "value": "processing"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1300,
        -880
      ],
      "id": "711d5156-4749-495b-901e-803a45a1c21f",
      "name": "ensure nothing processing",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "z49ainMq5BXxCiVz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-documents",
              "leftValue": "={{ $json.file_path }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1120,
        -880
      ],
      "id": "1624d3e8-3ed5-4dfa-8f7b-75bc8c5108f9",
      "name": "anything processing?"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "processing_status": "completed",
            "file_id": "={{ $('Has Documents?').item.json.file_id }}"
          },
          "matchingColumns": [
            "file_id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_id",
              "displayName": "file_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "file_name",
              "displayName": "file_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_type",
              "displayName": "file_type",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_size",
              "displayName": "file_size",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "file_path",
              "displayName": "file_path",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "upload_time",
              "displayName": "upload_time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "processing_status",
              "displayName": "processing_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chunks_created",
              "displayName": "chunks_created",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "vector_count",
              "displayName": "vector_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "error_message",
              "displayName": "error_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "metadata",
              "displayName": "metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1960,
        -100
      ],
      "id": "6fba1117-b808-40ac-a4d2-94a6300f4df6",
      "name": "Update Status1",
      "credentials": {
        "postgres": {
          "id": "z49ainMq5BXxCiVz",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Qdrant Vector Store2": {
      "main": [
        [
          {
            "node": "Update Status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Document Data": {
      "main": [
        [
          {
            "node": "Recursive  Splitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive  Splitter": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Add Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Add Context",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Context": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Every 30 Seconds": {
      "main": [
        [
          {
            "node": "ensure nothing processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Has Documents?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Documents?": {
      "main": [
        [
          {
            "node": "Update Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Status": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ensure nothing processing": {
      "main": [
        [
          {
            "node": "anything processing?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "anything processing?": {
      "main": [
        [],
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "8f32e6ad-e790-430f-a80f-f5d98adb5c9a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f07f836cac22cad92e5e5eaae0fd8126a9218c771c9e8519790581de3bb2e0e0"
  },
  "id": "AsS9gc8HKYmQZ8Dl",
  "tags": []
}